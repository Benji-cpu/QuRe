Product Requirements Document: Home Screen
1. Introduction

This document outlines the requirements for the Home Screen feature of the QuRe application. The Home Screen serves as the primary user interface, simulating a device lock screen where users can display and customize scannable QR codes. It provides options for background personalization and interaction with the displayed QR codes. Developers should leverage context7 for up-to-date documentation and examples when implementing features involving specific libraries. Implementation should adhere to the existing project structure within the QuRe directory.

2. Goals

Provide users with a visually appealing and functional simulation of a lock screen for displaying QR codes.
Allow users to easily customize the background appearance of the simulated lock screen.
Enable seamless interaction with displayed QR codes for editing or management.
Offer a clear pathway for free users to understand the benefits of upgrading to Premium for expanded QR code features.
Ensure a smooth, responsive, and performant user experience on mobile devices, utilizing current best practices for relevant libraries obtained via context7.

3. User Stories

As a user, I want to see the current time and date displayed prominently on the screen so that the lock screen simulation feels familiar and functional.
As a user, I want to display my custom QR code prominently on the lock screen so others can easily scan it.
As a free user, I want to see the default QuRe QR code alongside my custom one so I understand the app's branding and core functionality.
As a user, I want to swipe left or right on the background to easily cycle through different gradient options and personalize my screen's look.
As a user, I want to tap on my custom QR code to quickly open an editor and change its content.
As a free user, I want to tap on the QuRe QR code and be informed about the option to remove it by upgrading to Premium.
As a user, I want an "Edit" button to access more comprehensive customization options for both the background and the QR codes.
As a user, I want to take a clean screenshot of my customized lock screen (without UI controls) to easily share my setup.
As a user, I want the background change animation to be smooth and visually appealing for a polished experience.
As a user, I want visual feedback (like a lift or shadow) when I tap a QR code to confirm my interaction.

4. Functional Requirements

4.1. Lock Screen Simulation Layout

FR4.1.1: The screen shall display the current time and date, centered horizontally at the top.
Dev Note: This core screen component should be created within the QuRe/app/(tabs)/ directory, likely as HomeScreen.tsx or similar (confirm exact naming based on existing files in app/(tabs)/).
FR4.1.2: A row for QR codes shall be aligned to the bottom of the screen.
FR4.1.3: This row shall contain two distinct slots for QR codes:
Left Slot: Designated for the user's customizable QR code.
Right Slot: Designated for the default QuRe QR code (visible in the free version).
Dev Note: Create a reusable QRCodeDisplay.tsx component in QuRe/components/ to render the QR codes within these slots.
FR4.1.4: The layout must be responsive and adapt cleanly to various mobile screen sizes (Design guidance: Use Tailwind CSS. Dev Note: For specific Tailwind CSS class usage or responsive patterns, use context7.).

4.2. Background Customization

FR4.2.1: Users shall be able to swipe horizontally (left or right) across the screen background area to change the background appearance.
FR4.2.2: Swiping shall cycle through a predefined set of gradient backgrounds. The available gradients are:
Sunset: #ff6029 to #faa4d1
Ocean Breeze: #2328ff to #a1ffaa
Neon Dream: #4bff8f to #ebff11
Pastel Harmony: #e9fc88 to #edb4f8
Dynamic Trio: #ff295b to #ff77f4 to #4537ff
Dev Note: Add these gradient definitions (start/end colors) as constants within the existing QuRe/constants/Colors.ts file. Potentially create a reusable GradientBackground.tsx component in QuRe/components/.
FR4.2.3: The transition between gradients upon swiping shall incorporate a smooth fade animation. (Dev Note: Use React Native's Animated API. Query "How to implement fade transition on view change with React Native Animated API? use context7" for current best practices. If the logic becomes complex, consider extracting it into a custom hook in QuRe/hooks/.)
FR4.2.4: A subtle visual indicator (e.g., dots or arrows) shall be present to show the current gradient position and indicate swipe capability. This could be part of the HomeScreen.tsx or the potential GradientBackground.tsx component.
FR4.2.5: Gesture handling for swipes must feel fluid and native-like. (Dev Note: Implement using react-native-gesture-handler. Query "How to implement horizontal swipe gesture detection for background change with react-native-gesture-handler? use context7" for implementation details. Place gesture handling logic within HomeScreen.tsx or potentially a custom hook in QuRe/hooks/.)

4.3. QR Code Interactions

FR4.3.1: Tapping the QR code in the Bottom Left slot (Customizable QR) shall open the "Create QR Modal" allowing the user to edit its content.
Dev Note: The "Create QR Modal" functionality likely involves navigating to or presenting another screen/modal component. Define this modal component, perhaps as CreateQRModal.tsx in QuRe/components/ or a dedicated screen in QuRe/app/.
FR4.3.2: Tapping the QR code in the Bottom Right slot (QuRe QR) shall:
(Free Version): Open a pop-up or modal informing the user that removing this QR code requires upgrading to Premium, and provide a clear call-to-action to initiate the upgrade process (Premium Upgrade Modal).
(Premium Version): Open a pop-up or modal confirming if the user wants to remove/hide this QR code slot.
Dev Note: Implement this logic within the QRCodeDisplay.tsx component's touch handler or pass handlers down from HomeScreen.tsx. The "Premium Upgrade Modal" should be a reusable component, possibly placed in QuRe/components/.
FR4.3.3: Tapping either QR code shall trigger a subtle visual feedback animation (e.g., lift, shadow) to indicate interactivity. (Dev Note: Use TouchableOpacity combined with Animated styles within the QRCodeDisplay.tsx component. Query "How to create a lift/shadow animation on tap using TouchableOpacity and Animated API in React Native? use context7".)

4.4. Edit Functionality

FR4.4.1: An "Edit" button or icon shall be present on the screen (location TBD, likely part of an overlay bar within HomeScreen.tsx).
FR4.4.2: Tapping the "Edit" button shall open a modal view.
Dev Note: Create an EditModal.tsx component in QuRe/components/. Manage its visibility state within HomeScreen.tsx.
FR4.4.3: The Edit Modal (EditModal.tsx) shall contain at least two tabs:
"Background" Tab: Provides options to change the background (e.g., select gradients from constants/Colors.ts, potentially solid colors, images in the future).
"QR Codes" Tab: Provides options to manage QR codes (e.g., trigger navigation to edit the custom QR, potentially add more QR slots in Premium).
FR4.4.4: An "X" or "Close" button shall be present on the Edit overlay/bar within HomeScreen.tsx.

4.5. Screenshot Functionality

FR4.5.1: Tapping the "X" or "Close" button associated with the Edit function (see FR4.4.4) shall trigger a screenshot mechanism. (Dev Note: Research appropriate React Native screenshot libraries or APIs. Query "How to take a screenshot of a specific View, excluding UI elements, in React Native? use context7". Implement this logic within HomeScreen.tsx.)
FR4.5.2: The screenshot shall capture the current state of the lock screen simulation (background, time/date, QR codes) rendered within HomeScreen.tsx.
FR4.5.3: The screenshot shall exclude any overlaid UI elements like the Edit button/bar itself.
FR4.5.4: The user shall be prompted to save or share the captured screenshot (standard OS share/save dialog).

5. Non-Functional Requirements

NFR5.1 Performance:
Background swipe animations must be smooth (target 60 FPS).
QR code rendering, especially if multiple codes are displayed (Premium), must be efficient to avoid UI lag. (Dev Note: If managing multiple QR slots dynamically within HomeScreen.tsx, consider using FlatList or SectionList. Query "How to efficiently render a list of QR codes in React Native using FlatList? use context7".)
App launch and screen load times should be minimized.
NFR5.2 Usability:
Swipe gestures should feel natural and responsive, consistent with platform conventions derived from react-native-gesture-handler best practices (use context7).
Tap targets for QR codes and buttons must be adequately sized for touch interaction.
Visual feedback for interactions should be immediate and clear.
NFR5.3 Design:
The UI must be responsive, adapting gracefully to different screen sizes and orientations using Tailwind CSS (use context7 for specific Tailwind implementation questions). Adhere to existing theming established in constants/Colors.ts and hooks/useThemeColor.ts.
Visual elements should adhere to the overall QuRe app design language (fonts, colors, spacing). Utilize existing themed components like ThemedText.tsx and ThemedView.tsx from QuRe/components/ where appropriate.

6. Out of Scope (Initial Release)

Uploading custom images as backgrounds.
Using solid colors as backgrounds (beyond gradients).
Adding more than one custom QR code slot (reserved for Premium).
Advanced QR code styling options (colors, embedded logos).
Real-time weather display on the lock screen.

7. Future Considerations

Integration with device widgets.
Support for animated backgrounds (GIFs, videos).
Option to select specific gradients rather than just cycling.
Saving custom background/QR code layout presets.